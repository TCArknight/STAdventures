<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the "Abilities" tab panel. This tab is where
      the user selects the special abilities for the character.

      All public visual elements used with this tab panel start with the prefix "ab"
      to associate them with the tab.
-->

<document signature="Hero Lab Data">


  <!-- talTalent portal

  -->
  <portal
    id="talTalent"
    style="tblNormal">
    <table_dynamic
      component="Talent"
      showtemplate="talPick"
      choosetemplate="SimpleItem"
	  choosesortset="TalentSort"
      showfixedlast="no"
      addpick="resTalent"
	  candidatepick="ExprHelp"
	  candidatefield="ehTalExp">
      <titlebar><![CDATA[
        @text = "Add a Talent - " & hero.child[resTalent].field[resSummary].text
        ]]></titlebar>
      <description/>
      <headertitle><![CDATA[
        @text = "Talents: " & hero.child[resTalent].field[resSummary].text
        ]]></headertitle>
      <additem><![CDATA[
        ~if we're in advancement mode, we've been frozen, so display accordingly
        if (state.iscreate = 0) then
          @text = "{text clrgrey}Add Talents Via Advances Tab"
          done
          endif

        ~set the color based on whether the proper number of slots are allocated
        if (field[resLeft].value = 0) then
          @text = "{text clrgrey}"
        elseif (field[resLeft].value < 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Add New Talent"
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <!-- talSpecialRules portal

  -->
  <portal
    id="talSpecialRules"
    style="tblNormal">
    <table_fixed
      component="StarshipSpecial"
      showtemplate="talSSRPick" 
	  scrollable="no">
      <headertitle><![CDATA[
        @text = "Special Rules"
        ]]></headertitle>
      </table_fixed>
    </portal>
  <!-- talPick template
        Displays the name of the pick/thing and an info button with the basic
        description text. This is basically the "SimpleItem" template, with one
        key difference. Auto-added abilities such as those conferred by races are
        sorted and colored differently to distinguish their nature.
  -->
  <template
    id="talPick"
    name="Talent Pick"
    compset="Talent"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="lbldomain"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (tagis[DomainTerm.?] <> 0) then
            @text = tagnames[DomainTerm.?,"|"]
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>
      
	<portal
	  id="domain"
	  style="editNormal">
	  <edit
	    field="domDomain">
	    </edit>
	  </portal>

    <portal
      id="lblmenu1"
      style="lblSecond">
      <label
        field="usrLabel1">
        </label>
      </portal>
	  
    <portal
      id="menu1"
      style="menuNormal">
      <menu_things
        field="usrChosen1"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource1"
        candidatefield="usrCandid1">
        </menu_things>
      </portal>
	  
    <portal
      id="lblmenuar"
      style="lblSecond">
      <label
        field="usrLabelAr">
        </label>
      </portal>

    <portal
      id="menuarray"
      style="menuNormal">
      <menu_array
        field="usrSelect"
        array="usrArray"
        maxvisible="10">
        </menu_array>
      </portal>
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert
      perform portal[lblmenu1].centervert
      perform portal[menu1].centervert
      perform portal[domain].centervert
      perform portal[lblmenuar].centervert
      perform portal[menuarray].centervert

      ~determine whether our portals are visible; we only show them if requested
      ~Note: Remember that a non-empty tagexpr field indicates menu selection is used.
      if (field[usrCandid1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        portal[menu1].visible = 0
      elseif (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        endif
		
      if (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        endif

      if (empty(field[usrArray].arraytext[0]) <> 0) then
        portal[lblmenuar].visible = 0
        portal[menuarray].visible = 0
      elseif (field[usrLabelAr].isempty <> 0) then
        portal[lblmenuar].visible = 0
        endif

      ~position the delete portal on the far right and the info portal next to it
      perform portal[delete].alignedge[right,0]
      perform portal[info].alignrel[rtol,delete,-8]

      ~determine our effective right edge, allowing for the buttons above
      var edge as number
      edge = portal[info].left - 10

      ~setup the default portal width and gap to be used between and around portals
      var defwidth as number
      var gap as number
      defwidth = 100
      gap = 10

      ~determine the minimum amount of space we need to reserve for our portals
      var reserve as number
      if (portal[menuarray].visible <> 0) then
        reserve = portal[lblmenuar].width * portal[lblmenuar].visible
        reserve += defwidth + gap
      elseif (portal[menu1].visible <> 0) then
        reserve = portal[lblmenu1].width * portal[lblmenu1].visible
        reserve += defwidth + gap   
        endif

      ~setup the maximum width for our some portals, regardless of space available
      var maxwidth as number
	  var x as number
      maxwidth = 150

      ~position the name on the left, reserving our minimum space for any portals
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge - portal[name].left - reserve)
      x = portal[name].right + gap
		
      ~if we have an array-based menu, size and position it appropriately
      if (portal[menuarray].visible <> 0) then
        if (portal[lblmenuar].visible <> 0) then
          portal[lblmenuar].left = x
          x = portal[lblmenuar].right + 4
          endif
        portal[menuarray].left = x
        portal[menuarray].width = maxwidth

      ~if we have one thing-based menu, size and position it appropriately
      elseif (portal[menu1].visible = 1) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        portal[menu1].width = minimum(edge - portal[menu1].left,maxwidth)
		endif
		
	  ~if we don't need a domain, hide the portals
	  if (tagis[User.NeedDomain] = 0) then
	    portal[lbldomain].visible = 0
	    portal[domain].visible = 0
		
	  else
	    ~position the domain portal to the left of the info
        perform portal[domain].alignrel[rtol,info,-85]
        perform portal[lbldomain].alignrel[rtol,domain,-15]
		
        ~portal[domain].width = minimum(150,portal[info].left - portal[domain].left - 100)
        portal[domain].width = 125
		portal[lbldomain].width = 100
		
        ~position the name on the left and let it use all available space
        portal[name].left = 0
        portal[name].width = minimum(portal[name].width,portal[lbldomain].left - 5)
        endif
		
      ~if a menu is visible, make sure it has a selection
      if (portal[menu1].visible <> 0) then
        if (field[usrChosen1].ischosen = 0) then
          perform portal[menu1].setstyle[menuErrSm]
          endif
        endif
		
      if (portal[menuarray].visible <> 0) then
        if (field[usrSelect].isempty <> 0) then
          perform portal[menuarray].setstyle[menuError]
          endif
        endif
		
      ~if the ability is auto-added, change its font to indicate that fact
      if (candelete = 0) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>

  <template
    id="talSSRPick"
    name="Special Rule Pick"
    compset="StarshipSpecial"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>
  
    <portal
      id="summary"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="summary">
        </label>
      </portal>    
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[name].height + portal[summary].height + 5
	  
      ~position our tallest portal at the top
      portal[name].top = 0
	  portal[summary].top = portal[name].bottom + 2

      ~center the other portals vertically
      perform portal[info].centervert
	  
      ~position the info portal on the far right
      perform portal[info].alignedge[right,-2]
      
      ~position the name on the left and use availble space, with a gap for menus
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[info].left - portal[name].left)
	  portal[summary].left = portal[name].left
	  portal[summary].width = portal[info].left - 5
	  
		
      ]]></position>

    </template>

	
	
  <!-- abilities layout
        This layout orchestrates the display of the visual elements that comprise
        the Abilities tab. This amounts to a title at the top and a dynamic table
        below where the user can add the special abilities he wants.

        The logic for this layout is similar to (albeit much simpler than) the
        logic for the Basics tab. So please refer to the Basics tab for more details.
  -->
  <layout
    id="talents">
    <portalref portal="talTalent" taborder="10"/>
    <portalref portal="talSpecialRules" />
	
    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
      ~freeze our table in advancement mode to disable adding new choices
      ~Note: All freezing must be done *before* any positioning is performed.
      if (state.iscreate = 0) then
        portal[talTalent].freeze = 1
        endif
	  
      ~position and size the table to span the full layout; it will only use the
      ~vertical space that it actually needs
      perform portal[talTalent].autoplace
      perform portal[talSpecialRules].autoplace[10]
	  
	  ~ if we're a character, hide the special rules portal
	  portal[talSpecialRules].visible = 1 - #ischaracter[]
	  
      ]]></position>

    </layout>


  <!-- abilities panel
        This is the "Abilities" panel shown within Hero Lab. Since we want this
        panel to appear after Basics and within the traits grouping, we assign it
        an "order" of 120.

        The logic for this panel is similar to the logic for the Basics panel, so
        please refer to the Basics panel for more details.
  -->
  <panel
    id="talents"
    name="Talents"
    marginhorz="5"
    marginvert="5"
    order="120">
    <live>!HideTab.talents</live>
    <layoutref layout="talents"/>
    <position><![CDATA[
      ]]></position>
    </panel>
	
  </document>
