<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components associated with traits such as
      attributes, skills, special abilities, etc.
-->

<document signature="Hero Lab Structure">

  <!-- ShipInfo component
        Used for specifying a type of information about an NPC. Displayed in
        the tables on the NPC tab.
  -->
  <component
    id="ShipInfo"
    name="Starship Info">
	  
    <field
      id="shipFraUserName"
      name="Frame Custom Name"
      type="derived"
	  maxlength="50">
      </field>
	  
    <field
      id="shipLaunchYear"
      name="Year of First Launch"
      type="user"
	  maxlength="4">
      </field>
	  
    <field
      id="shipYear"
      name="Current Ship Year"
      type="user"
	  defvalue="2371"
	  maxlength="4">
      </field>
	  
    <field
      id="shipServ"
      name="Service Information"
      type="derived"
	  maxlength="50">
      </field>
	  
    <field
      id="shipScale"
      name="Scale"
      type="derived"
	  defvalue="4">
      </field>

    <field
      id="shipShield"
      name="Shields"
      type="derived"
      minvalue="0"
      maxvalue="25">
      </field>

    <field
      id="shipPower"
      name="Power"
      type="derived"
      minvalue="0"
      maxvalue="15">
      </field>

    <field
      id="shipReservePwr"
      name="Reserve Power"
      type="derived"
      minvalue="0"
      maxvalue="1">
      </field>

    <field
      id="shipReservePwrTxt"
      name="Reserve Power Text"
      type="derived"
      maxlength="15">
      </field>

    <field
      id="shipRes"
      name="Resistance"
      type="derived"
      minvalue="0"
      maxvalue="25">
      </field>

    <!-- Bonuses applied to the Shields (e.g. from other abilities) -->
    <field
      id="bonShields"
      name="Bonus Shield Value"
      type="derived">
      </field>

    <!-- Bonuses applied to weapon damage (e.g. from other abilities) -->
    <field
      id="bonWeaponDmg"
      name="Bonus Weapon Damage"
      type="derived">
      </field>

    <!-- Bonuses applied to the Shields (e.g. from other abilities) -->
    <field
      id="bonPower"
      name="Bonus Power Value"
      type="derived">
      </field>

    <!-- Bonuses applied to the Shields (e.g. from other abilities) -->
    <field
      id="bonResist"
      name="Bonus Resistance Value"
      type="derived">
      </field>

    <field
      id="shipClass"
      name="Class"
      type="derived"
      maxlength="50">
      </field>

    <field
      id="shipClassShort"
      name="Class"
      type="derived"
      maxlength="50">
      </field>
	  
    <field
      id="shipShipyard"
      name="Shipyard"
      type="derived"
      maxlength="10000">
      </field>
	  
    <field
      id="shipOverview"
      name="Overview"
      type="user"
      maxlength="10000"
	  defvalue="Overview">
      </field>
	  
    <field
      id="shipCapabilities"
      name="Capabilities"
      type="user"
      maxlength="10000"
	  defvalue="Capabilities">
      </field>

    <field
      id="shipRefVar"
      name="Refits and Variants"
      type="user"
      maxlength="2000"
	  defvalue="Refits and Variants">
      </field>
	  
    <!-- Suggested Profiles -->
    <field
      id="shipSuggPro"
      name="Suggested Profiles"
      type="user"
      maxlength="1000"
	  defvalue="Suggested Mission Profiles">
      </field>
	  
    <!-- Naming Conventions -->
    <field
      id="shipNamConv"
      name="Naming Conventions"
      type="user"
      maxlength="1000"
	  defvalue="Naming Conventions">
      </field>	
	  
    <field
      id="shipCrew"
      name="Crew Support"
      type="derived"
	  defvalue="1">
      </field>
	  
    <field
      id="shipCrewSize"
      name="Crew Size"
      type="derived"
      maxlength="100">
      </field>
	  
    <field
      id="shipCrewRating"
      name="Crew Rating"
      type="derived"
      maxlength="100">
      </field>

    <field
      id="shipCrewSumm"
      name="Crew Summary"
      type="derived"
      maxlength="250">
      </field>
	  
    <field
      id="shipSmallCraft"
      name="Small Craft Readiness"
      type="derived"
      minvalue="0">
      </field>
	  
    <!-- Year Frame Entered Service -->
    <field
      id="shipSerSumm"
      name="Service Summary"
      type="derived"
	  maxlength="50">
      </field>
	  
    <!-- Background description of the actor -->
    <field
      id="shipDetails"
      name="Ship Detail Text"
      type="user"
      maxlength="10000">
      </field>
	  
    <!-- Background description of the actor -->
    <field
      id="shipRegistry"
      name="Ship Registry"
      type="user"
      maxlength="20"
	  defvalue="Registry">
      </field>
	  
    <!-- Affiliation -->
    <field
      id="shipAffil"
      name="Affiliation"
      maxlength="50"
      type="user">
      </field>
	  
    <!-- Affiliation -->
    <field
      id="shipAddWeapons"
      name="Additional Weapons"
      type="derived"
	  minvalue="0"
	  defvalue="0">
      </field>
	  
    <!-- Role -->
    <field
      id="shipProfile"
      name="Mission Profile"
      maxlength="50"
      type="derived">
      </field>

    <!-- Saucer Separation? -->
    <field
      id="shipAllowSaucer"
      name="Saucer Separation Allowed?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>
	  
    <field
      id="shipPodsAllowed"
      name="Mission Pods Allowed?"
      type="derived"
      minvalue="0"
      maxvalue="1">
      </field>
  
    <!-- Frame Shuttlecraft notes -->	  
    <field
      id="shipShuttleNotes"
      name="Shuttlecraft Notes"
      type="user"
      maxlength="2000">
      </field>
	  

    <!-- Source Information -->
    <field
      id="shipSourceName"
      name="Source Name"
      maxlength="100"
      type="derived">
      </field>

    <field
      id="shipSourcePage"
      name="Source Page"
      maxlength="10"
      type="derived">
      </field>
	  
    <creation><![CDATA[
      ~custom items need to pick a name
      if (tagis[Helper.CustomItem] <> 0) then
        field[username].text = "Enter Name"
        endif
      ]]></creation>

    <!-- Make sure the choose template has enough width for our names -->
    <tag group="SimpleItem" tag="width300"/>
	
    <!-- Build crew summary -->
    <eval index="1" phase="Final" priority="10000"><![CDATA[
      var mySumm as string

	  if (field[shipCrewSize].isempty = 0) then
	    mySumm &= field[shipCrewSize].text
		endif

	  if (empty(mySumm) <> 0) then
		mySumm &= " (" & field[shipCrewRating].text & ")"
	  else
		mySumm &= field[shipCrewRating].text
		endif
		
      field[shipCrewSumm].text = mySumm

      ]]></eval>

    <eval index="2" phase="Setup" priority="5000"><![CDATA[
	  if (hero.tagis[source.UtopiaPlanetia] <> 0) then
	    if (hero.tagis[CustomFrame.?] <> 0) then
          perform hero.assign[Helper.UserUnlock]
		  endif
        endif
		
      ~ Assign a tag if the user hasn't specified any background text
      if (field[shipDetails].isempty <> 0) then
        perform assign[Helper.NoDetailText]
        endif
      ]]></eval>

    <eval index="3" phase="Ability" priority="1000"><![CDATA[
	  ~ fill out the Mission Profile if one has been selected
      if (hero.tagis[HasProfile.?] <> 0) then
        field[shipProfile].text = hero.findchild[Profile].field[name].text
        endif
		
      ~ Assign a tag if the user hasn't specified any background text
      if (field[shipAddWeapons].value <> 0) then
        #resmax[resAddWeapons] += field[shipAddWeapons].value
        endif
      ]]></eval>
 
    <eval index="6" phase="Ability" priority="5000" name="Calc Crew and Craft"><![CDATA[
	  
	  ~ crew support
      field[shipCrew].value = #shipscale[]
	  
	  ~ small craft Readiness
	  field[shipSmallCraft].value = #shipscale[] - 1
	 
      ]]></eval> 
 
    <eval index="7" phase="Ability" priority="5000" name="Calc Ship Shields"><![CDATA[
	  var shields as number
	  var shldBonus as number
	  	  	  
	  ~ shields 
	  shields = 0
	  
	  if (hero.tagis[ShipShields.Scale] <> 0) then
	    shields += #shipscale[]
	    endif
	  
	  if (hero.tagis[ShipShields.Structure] <> 0) then
	    shields += #structure[]
	    endif
	  
	  if (hero.tagis[ShipShields.Security] <> 0) then
	    if (hero.tagis[Ship.NoShields] = 0) then
	      shields += #security[]
		  endif
		endif
      
	  ~ for small craft in 1E, shields rating is halved
	  if (#issmallcraft[] <> 0) then
	    if (#is1stedition[] <> 0) then 
	      shields = round(shields/2,0,-1)
		  endif
	    endif
	
	  shields += field[bonShields].value
	  
      field[shipShield].value = shields  
	 
      ]]></eval> 
 
    <eval index="8" phase="Ability" priority="5000" name="Calc Ship Resistance"><![CDATA[
	  var totResist as number
      var structBonus as number
	  
	  if (#isstarship[] <> 0) then
	    totResist = #shipscale[]
		endif
	  
	  ~ if 2nd edition, add resistance bonus from structure
	  if (#is2ndedition[] <> 0) then
	  
	    if (#issmallcraft[] <> 0) then
	      call ResistStructBonus
	      field[bonResist].value += structBonus
		  endif
		  
		endif
	  
	  totResist += field[bonResist].value
	  
	  field[shipRes].value = totResist 
	 
      ]]></eval>
 
    <eval index="9" phase="Ability" priority="5000" name="Calc Ship Power"><![CDATA[
	  var pwr as number
	  
	  ~ 2nd edition doesn't use the power rating, so no need to calculate it.
	  doneif (#is2ndedition[] <> 0)
	  
	  ~ power
	  pwr = #engines[] 
	  
	  if (#issmallcraft[] <> 0) then
	    pwr = round(pwr/2,0,1)
	    endif
		  
	  pwr += field[bonPower].value
	  
      field[shipPower].value = pwr
	 
      ]]></eval>

    <!-- Use the starting power points as our initial maximum -->
    <eval index="10" phase="Final" priority="1100" name="Determine Reserve Pwr"><![CDATA[
	  var avail as number
	  
	  avail = hero.childfound[trkReservePower].field[trkUser].value
	  
      field[shipReservePwr].value = avail
	  if (avail = 0) then
	    field[shipReservePwrTxt].text = "Unavailable"
	  else
	    field[shipReservePwrTxt].text = "Available"
	    endif
		
		
      ]]></eval>
	  
	  
    </component>

  <!-- Frame component
        Each race derives from this component
  -->
  <component
    id="Frame"
    name="Frame"
    autocompset="no">

    <!-- Year Frame Entered Service -->
    <field
      id="fraYearEnt"
      name="Entered Service"
      type="user"
	  maxlength="4">
      </field>
	  
    <!-- Year Frame Entered Service -->
    <field
      id="fraYearRet"
      name="Retired From Service"
      type="derived"
	  maxlength="4">
      </field>

    <!-- Year Frame Entered Service -->
    <field
      id="fraSerSumm"
      name="Service Summary"
      type="derived"
	  maxlength="50">
      </field>
	  
    <!-- Frame Scale -->
    <field
      id="fraScale"
      name="Frame Scale"
      type="user"
	  defvalue="4">
      </field>
  
    <!-- Frame Capabilities -->	  
    <field
      id="fraShipyard"
      name="Shipyards"
      type="user"
      maxlength="2000">
      </field>
	  
    <!-- Frame Overview (Description becomes overview)-->
	<field
      id="fraOverview"
      name="Overview"
      type="user"
      maxlength="10000">
      </field> 
	  
    <!-- Frame Capabilities -->	  
    <field
      id="fraCapabilities"
      name="Capabilities"
      type="user"
      maxlength="10000">
      </field>
	  
    <!-- Frame Suggested Profiles -->
    <field
      id="fraSuggPro"
      name="Suggested Profiles"
      type="user"
      maxlength="1000">
      </field>
	  
    <!-- Frame Naming Conventions -->
    <field
      id="fraNamConv"
      name="Suggested Profiles"
      type="user"
      maxlength="1000">
      </field>	
	  
    <!-- Frame Refits and Variants -->	  
    <field
      id="fraRefVar"
      name="Refits and Variants"
      type="user"
      maxlength="10000">
      </field>
    <!-- Frame Capabilities -->	  
    <field
      id="fraCrewSize"
      name="Crew Size"
      type="user"
      maxlength="100">
      </field>

    <!-- Frame Capabilities -->	  
    <field
      id="fraCrewRating"
      name="Crew Ratings"
      type="user"
      maxlength="100">
      </field>
	  
    <!-- Frame Systems -->
	<field
      id="fraSystemPoints"
      name="Total System Points"
      type="derived">
      </field>
    <field
      id="fraComm"
      name="Communication"
      type="user">
      </field>

    <field
      id="fraComp"
      name="Computer"
      type="user">
      </field>

    <field
      id="fraEngine"
      name="Engines"
      type="user">
      </field>

    <field
      id="fraSens"
      name="Sensors"
      type="user">
      </field>

    <field
      id="fraStruc"
      name="Structure"
      type="user">
      </field>

    <field
      id="fraWeap"
      name="Weapons"
      type="user">
      </field>
	  
    <!-- Frame Departments -->
	<field
      id="fraDeptPoints"
      name="Total Department Points"
      type="derived">
      </field>
	  
    <field
      id="fraCmd"
      name="Command"
      type="user">
      </field>

    <field
      id="fraConn"
      name="Conn"
      type="user">
      </field>

    <field
      id="fraEng"
      name="Engineering"
      type="user">
      </field>

    <field
      id="fraMed"
      name="Medicine"
      type="user">
      </field>

    <field
      id="fraSecur"
      name="Security"
      type="user">
      </field>

    <field
      id="fraSci"
      name="Science"
      type="user">
      </field>

    <!-- Saucer Separation? -->
    <field
      id="fraAllowSaucer"
      name="Saucer Separation Allowed?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>
	  
    <!-- Mission Pods? -->
    <field
      id="fraPodsAllowed"
      name="Mission Pods Allowed?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>
	  
    <field
      id="fraPods"
      name="Number of Mission Pods"
      type="user"
	  defvalue="0">
      </field>
  
    <!-- Frame Shuttlecraft notes -->	  
    <field
      id="fraShuttleNotes"
      name="Shuttlecraft Notes"
      type="user"
      maxlength="2000">
      </field>
	
    <!-- Each race needs its own identity tag to configure the hero appropriately -->
    <identity group="Frame"/>
    <identity group="IsFrame"/>
    <identity group="CustomFrame"/>
	  
    <!-- By Default, all ships use these to calculate shield ratings -->
    <tag group="ShipShields" tag="Scale"/>
    <tag group="ShipShields" tag="Structure"/>
    <tag group="ShipShields" tag="Security"/>

    <!-- Track the race on the actor by assigning the appropriate tags -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Frame.?]
      perform forward[IsFrame.?]
	  perform forward[StarshipSelected.?]
	  perform forward[ShipShields.?]
		
	  if (tagis[Helper.CustomItem] <> 0) then
        perform forward[CustomFrame.?]
	    endif
		
	  if (field[fraPodsAllowed].value <> 0) then
	    perform hero.assign[ShipSelectAllow.Pod]
	    endif
      ]]></eval>

    <!-- Increase Systems and Departments -->
    <eval index="2" phase="Initialize" priority="5000"><![CDATA[
      ~reset user fields
	  #userresetAbil[attrsys01]
	  #userresetAbil[attrsys02]
	  #userresetAbil[attrsys03]
	  #userresetAbil[attrsys04]
	  #userresetAbil[attrsys05]
	  #userresetAbil[attrsys06]
	  
	  ~set minumums
      #abilminimum[attrsys01] = field[fraComm].value
	  #abilminimum[attrsys02] = field[fraComp].value
	  #abilminimum[attrsys03] = field[fraEngine].value
	  #abilminimum[attrsys04] = field[fraSens].value
	  #abilminimum[attrsys05] = field[fraStruc].value
	  #abilminimum[attrsys06] = field[fraWeap].value

	  #abilbonus[discdept01] = field[fraCmd].value
	  #abilbonus[discdept02] = field[fraConn].value
	  #abilbonus[discdept04] = field[fraEng].value
	  #abilbonus[discdept06] = field[fraMed].value
	  #abilbonus[discdept03] = field[fraSecur].value
	  #abilbonus[discdept05] = field[fraSci].value

      ]]></eval>

    <!-- Increase Trait and Talent counts -->
    <eval index="3" phase="Setup" priority="5000"><![CDATA[
	  trustme
	  var txt as string
	  var shortname as string
	  var shortlen as number
	  var scale as number
	  
	  txt = field[fraYearRet].text
	  scale = field[fraScale].value
	  
	  field[fraSerSumm].text = field[fraYearEnt].text
	  
      if (empty(txt) = 0) then
	    field[fraSerSumm].text &= " (Retired: " & field[fraYearRet].text & ")"
		endif
		
      if (empty(field[descript].text) = 0) then 
		field[fraOverview].text = field[descript].text
	    endif
	  	  
      foreach pick in hero where "component.ShipInfo"
		~ Power, Resistance, crew based on scale
        eachpick.#shipscale[] = scale
		
		eachpick.field[shipClass].text = field[name].text
		
		shortlen = length(field[name].text) - 6
		shortname = mid(field[name].text, 0, shortlen)
		eachpick.field[shipClassShort].text = shortname
		
		if (eachpick.field[shipLaunchYear].isempty <> 0) then
		  eachpick.field[shipLaunchYear].text = field[fraYearEnt].text
		  endif
		
		if (eachpick.field[shipShipyard].isempty <> 0) then
		  eachpick.field[shipShipyard].text = field[fraShipyard].text
		  endif
		if (eachpick.field[shipOverview].isempty <> 0) then
		  eachpick.field[shipOverview].text = field[fraOverview].text
		  endif
		if (eachpick.field[shipCapabilities].isempty <> 0) then
		  eachpick.field[shipCapabilities].text = field[fraCapabilities].text
		  endif
		if (eachpick.field[shipRefVar].isempty <> 0) then
		  eachpick.field[shipRefVar].text = field[fraRefVar].text
		  endif
		if (eachpick.field[shipSuggPro].isempty <> 0) then
		  eachpick.field[shipSuggPro].text = field[fraSuggPro].text
		  endif
		if (eachpick.field[shipNamConv].isempty <> 0) then
		  eachpick.field[shipNamConv].text = field[fraNamConv].text
		  endif
		
		if (eachpick.field[shipServ].isempty <> 0) then
		  eachpick.field[shipServ].text = field[fraSerSumm].text
		  endif
		if (eachpick.field[shipCrewSize].isempty <> 0) then
		  eachpick.field[shipCrewSize].text = field[fraCrewSize].text
		  endif
		if (eachpick.field[shipCrewRating].isempty <> 0) then
		  eachpick.field[shipCrewRating].text = field[fraCrewRating].text
		  endif
		if (eachpick.field[shipSerSumm].isempty <> 0) then
		  eachpick.field[shipSerSumm].text = field[fraSerSumm].text
		  endif
		if (eachpick.field[shipShuttleNotes].isempty <> 0) then
		  eachpick.field[shipShuttleNotes].text = field[fraShuttleNotes].text
		  endif
		
		if (tagis[Ship.SaucerSep] <> 0) then
		  field[fraAllowSaucer].value = tagis[Ship.SaucerSep]
		elseif (field[fraAllowSaucer].value <> 0) then
		  perform assign[Ship.SaucerSep]
		  endif
		  
		if (tagis[Ship.MissionPod] <> 0) then
		  field[fraPodsAllowed].value = tagis[Ship.MissionPod]
		elseif (field[fraPodsAllowed].value <> 0) then
		  perform assign[Ship.MissionPod]
		  endif 
				  
		eachpick.field[shipAllowSaucer].value = field[fraAllowSaucer].value
		eachpick.field[shipPodsAllowed].value = field[fraPodsAllowed].value
	  
		if (eachpick.field[shipSourceName].isempty <> 0) then
	      eachpick.field[shipSourceName].text = field[SourceName].text
	      endif
		if (eachpick.field[shipSourcePage].isempty <> 0) then
	      eachpick.field[shipSourcePage].text = field[SourcePage].text
	      endif
		
		nexteach
		

	  perform forward[Ship.?]
		
	  
      ]]></eval>
	  
    <!-- Increase Trait and Talent counts -->
    <eval index="4" phase="PreAbility" priority="5000"><![CDATA[
	  #resmax[resTrait] += 1
	  #resmax[resTalent] += hero.childfound[mscShip].#shipscale[]
      #resmax[resShipPod] += field[fraPods].value
      ]]></eval>
	  </component>
	  
  <!-- Mission Profile component
        Each Profile derives from this component
  -->
  <component
    id="Profile"
    name="Mission Profile"
    autocompset="no">

    <!-- Profile Departments -->
    <field
      id="proCmd"
      name="Command"
      type="derived">
      </field>

    <field
      id="proConn"
      name="Conn"
      type="derived">
      </field>

    <field
      id="proEng"
      name="Engineering"
      type="derived">
      </field>

    <field
      id="proMed"
      name="Medicine"
      type="derived">
      </field>

    <field
      id="proSecur"
      name="Security"
      type="derived">
      </field>

    <field
      id="proSci"
      name="Science"
      type="derived">
      </field>

    <field
      id="proTalExp"
      name="Talent Expression"
      type="derived"
	  maxlength="500">
	  </field> 
	  
    <!-- Each race needs its own identity tag to configure the hero appropriately -->
    <identity group="Profile"/>
    <identity group="HasProfile"/>
	
    <!-- Track the race on the actor by assigning the appropriate tags -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Profile.?]
      perform forward[HasProfile.?]
	  perform forward[StarshipSelected.?]
      ]]></eval>

    <!-- Increase Systems and Departments -->
    <eval index="2" phase="Initialize" priority="5000"><![CDATA[
	  hero.child[discdept01].field[abiBonus].value += field[proCmd].value
	  hero.child[discdept02].field[abiBonus].value += field[proConn].value
	  hero.child[discdept04].field[abiBonus].value += field[proEng].value
	  hero.child[discdept06].field[abiBonus].value += field[proMed].value
	  hero.child[discdept03].field[abiBonus].value += field[proSecur].value
	  hero.child[discdept05].field[abiBonus].value += field[proSci].value
	  
	  var txt as string
	  txt = tagids[MisProTal.?,"|"]
	  txt = replace(txt,"MisProTal","thingid",0)
	  
	  if (empty(field[proTalExp].text) <> 0) then
	    hero.child[ExprHelp].field[ehSProExp].text = txt
	    endif
	  
      ]]></eval>
	  
    <!-- Track the race on the actor by assigning the appropriate tags -->
    <eval index="3" phase="Setup" priority="5500"><![CDATA[
      ~ increase system points by adjsutment
	  #resmax[resDiscip] += field[proCmd].value
	  #resmax[resDiscip] += field[proConn].value
	  #resmax[resDiscip] += field[proEng].value
	  #resmax[resDiscip] += field[proMed].value
	  #resmax[resDiscip] += field[proSecur].value
	  #resmax[resDiscip] += field[proSci].value
      ]]></eval>
	  
      
    <!-- Report a validation error if no selection has been made for a lifepath selection -->
    <evalrule index="1" phase="Validate" priority="10000" message="Not enough Mission Profile Talents" summary="Select Talent for Mission Profile!"><![CDATA[
      ~if we're not using the starship creation, we're good.
	  validif (hero.tagis[ShowTab.Starship] = 0)
	  
	  ~if we're a small craft or starbase, we're good.
	  validif (hero.tagis[CharType.typSmallCraft] <> 0)
	  validif (hero.tagis[CharType.typStarbase] <> 0)
	  
	  ~we're good if we have chosen a mission profile talent
	  validif (hero.tagis[Profile.Talent] <> 0)
	  
      ~mark profile tab as invalid
      container.panelvalid[profile] = 0
	  
      ]]></evalrule>
	  
	  </component>
	  
	<!-- No compsets are auto-defined for the component -->

  <!-- Starship weapon components -->
  <!-- BaseWeaponShip component -->
  <component
    id="BaseWeaponShip"
    name="Starship Weapon Base"
    autocompset="no">

	<field
      id="wpShipWpnName"
      name="Range"
      type="derived"
      maxlength="30">
      </field>

	<field
      id="wpShipWpnType"
      name="Weapon Type"
      type="derived"
      maxlength="20">
      </field>

	<field
      id="wpShipWpnRange"
      name="Range"
      type="derived"
      maxlength="30">
      </field>

    <field
      id="wpShipBaseDmg"
      name="Damage"
      type="derived"
      maxvalue="10">
      </field>

    <field
      id="wpShipBaseDmgBon"
      name="Damage"
      type="derived"
      maxvalue="10">
      </field>
	
    <!-- Synthesized text Qualities for the weapon -->
	<field
      id="wpShipWpnQuals"
      name="Qualities"
      type="derived"
	  maxlength="75"
	  maxfinal="75">

      <finalize><![CDATA[
        var txt as string
		
		var tags as string
		tags = tagnames[GearQual.?,", "] 
		
		if (empty(tags) = 0) then
		  txt &= " " & tags
		  endif
		  
	    @text = txt
		
        ]]></finalize>
      </field>
	
    <!-- Synthesized text Qualities for the weapon -->
	<field
      id="wpShipWpnQualArr"
      name="Qualities"
      type="derived"
	  style="array"
      maxlength="75"
	  arrayrows="10">
      </field>
	  
	<!-- Tractor Bonus Value (used for Tractor Beam Strength calculations) -->  
    <field
      id="wpShipTractBonus"
      name="Tractor Bonus"
      type="derived"
      defvalue="0">
      </field>
	  
    <!-- All ranged weapons get the same tag for sorting purposes -->
    <tag group="Armory" tag="Range"/>
	
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
	  field[wpShipWpnType].text = tagnames[ShipWeaponType.?," | "]
      ]]></eval>

    <!-- Calculate the base damage for the weapon -->
    <eval index="2" phase="Final" priority="7000" name="Calc Ship Weapon Damage"><![CDATA[
	  var comp as number
	  var fixedBase as number
	  var baseDmg as number
	  var bonusDmg as number
	  var sysBonus as number
      var totDamage as number
	  
	  
	  comp = tagis[component.Energy]
	  fixedBase = tagis[Weapon.FixedBase]
	  
	  baseDmg = field[wpShipBaseDmg].value
	  
	  if (#is1stedition[] <> 0) then
	    bonusDmg +=  #shipscale[]
	  
	    if (tagis[Weapon.FixedBase] <> 0) then
          field[wpDamage].value = #security[]
		endif
		
	  elseif (#is2ndedition[] <> 0) then
	    ~ if it's 2nd Edition, we need to calculate based on 2E rules.
		baseDmg = field[wpShipBaseDmg].value
		bonusDmg += field[wpShipBaseDmgBon].value
		bonusDmg += hero.childfound[mscShip].field[bonWeaponDmg].value
		endif
		
	  Call ShipWpnDamage
		
	  field[wpDamage].value = totDamage
		
	  
      ]]></eval>
	  
    <!-- Prepend any derived special notes to the appropriate field -->
    <eval index="3" phase="Render" priority="2000"><![CDATA[
      var special as string

      ~assign any appropriate special notes to the "special" variable here

      ~prepend any existing special details with the notes for this weapon
      field[wpNotes].text = splice(special,field[wpNotes].text,", ")
      ]]></eval>
	  
    <!-- Prepend any derived special notes to the appropriate field -->
    <eval index="4" phase="Final" priority="5000"><![CDATA[
	  ~make sure we're in a gizmo (non-zero if there is a child gizmo)
	  ~ doneif (isgizmo = 0)
	
      var qualities as string
				
      ~assign any appropriate special notes to the "special" variable here
	  ~ foreach pick in gizmo from GearQuality
	  ~   qualities = splice(qualities,eachpick.field[gqQualName].text,", ")
	  ~   nexteach
	  
	  qualities = tagnames[GearQual.?,", "] 
	  
	  ~declare variables that are used to communicate with our sort procedure
      var InputStr as string
      var StrSep as string
      var SortedStr as string
		
      InputStr = qualities
	  StrSep = ", "
	  
	  call StringSort
	  
      ~prepend any existing special details with the notes for this weapon
      field[wpShipWpnQuals].text = SortedStr
	  
      ]]></eval>
	  
    <eval index="5" phase="Final" priority="9000"><![CDATA[
	  ~make sure we're in a gizmo (non-zero if there is a child gizmo)
	  doneif (isgizmo = 0)
	  
      var systems as string
      var qualities as string
      var temptxt as string
		
	  ~declare variables that are used to communicate with our sort procedure
      var InputStr as string
      var StrSep as string
      var SortedStr as string
	  var sepcnt as number
	  var curpos as number
	  var curlen as number
	  var overalllen as number
	  var sect as number
	  var lastsep as number
	  
	  var i as number
	  
      ~assign any appropriate special notes to the "special" variable here
	  foreach pick in gizmo from DeliverySystem
	    systems = " " & eachpick.field[name].text
		
		~ if the pick has a gizmo (qualities of it's own)
		~ then add those qualities to the weapon qualities
		if (eachpick.isgizmo <> 0) then 
		  
		  foreach pick in eachpick.gizmo from GearQuality
		    qualities = splice(qualities, eachpick.field[gqQualName].text,", ")
		    nexteach
			
          temptxt = splice(field[wpShipWpnQuals].text,qualities,", ")
		  
		  endif

		
        InputStr = temptxt
	    StrSep = ", "
	  
	    call StringSort
	  
		field[wpShipWpnQuals].text = SortedStr  
	    nexteach

      ~ convert qualities to the array
	  ~ count % in string
	  temptxt = field[wpShipWpnQuals].text
	  
	~ set up while loop for stripping duplicates
	var cur_pos as number
	var srch_str as string
	var cur_str as string
	var build_str as string

	~ move temptxt -> cur_str  for debugging purposes
	~ debug temptxt
	cur_str = temptxt
	cur_pos = pos(temptxt,"%")
	    
	i = 0
	
	while (cur_pos <> -1)

		~ strip any leading separators
		while (cur_pos = 0)
			cur_str = mid(cur_str,1,length(cur_str))
			cur_pos = pos(cur_str,"%")
			loop

		~ cur_pos now has the position of the separator
		~ since pos is 0 based, cur_pos is the length of  
		~ the search string we want
		~ build up new string from srch_str
		srch_str = mid(cur_str,0,cur_pos)
		cur_str = replace(cur_str,srch_str,"",0)
		
		field[wpShipWpnQualArr].arraytext[i] = srch_str

		~ find position of out next separator for next time around the loop
		~ when we cannot find any separators any more we exit the loop
		cur_pos = pos(cur_str,"%")
	    i += 1
		
		loop
		
    ~ sort the resulting array
	var n as number
	var j as number
	var temp as string
	var text1 as string
	var text2 as string
	
	~ get number of elements in array
	i = 0
	while (empty(field[wpShipWpnQualArr].arraytext[i]) = 0)
	    i += 1
		loop
    lastsep = i
	
	n = 0
	while (n < lastsep)
	  j = 0
	  i = (lastsep - n - 1)
	  
	  debug "n - " & n
	  
	  while (j < i)
	    text1 = field[wpShipWpnQualArr].arraytext[j]
	    text2 = field[wpShipWpnQualArr].arraytext[j+1]
		debug "T1 - " & text1
		debug "T2 - " & text2
		~ debug "compare - " & compare(text1,text2)
		
		if (compare(text1,text2) > 0) then
		  debug "T2 comes before T1, move it"
		  
		  ~ debug "j - " & j
		  
          temp = text1
		  field[wpShipWpnQualArr].arraytext[j] = text2
		  field[wpShipWpnQualArr].arraytext[j+1] = temp

		  ~ debug "field[wpShipWpnQualArr].arraytext[j] - " & field[wpShipWpnQualArr].arraytext[j]
		  ~ debug "field[wpShipWpnQualArr].arraytext[j+1] - " & field[wpShipWpnQualArr].arraytext[j+1]
		elseif (compare(text1,text2) < 0) then
		  debug " T1 comes before T2, no need to move"
          endif	
		  
        j += 1		  
	    loop
	  n += 1
	  loop

      ~ repopulate field with array contents
	  i = 0
	  temp = ""
	  
	  while (i < lastsep)
		if (i <> 0) then
		  temp &= ", "
		  endif
	    temp &= field[wpShipWpnQualArr].arraytext[i]
		i += 1
	    loop

      field[wpShipWpnQuals].text = temp
	  
	  ~prepend any existing special details with the notes for this weapon
      field[wpShipWpnName].text = field[name].text & systems
      ]]></eval>
	  
    <eval index="6" phase="Final" priority="10000" name="Set Weapon Livename"><![CDATA[
      var name as string
				
      name = field[wpShipWpnName].text
	  
      ~prepend any existing special details with the notes for this weapon
      field[livename].text = name
      ]]></eval>

    </component>

  <!-- Component for gear qualities -->
  <component
    id="DeliverySystem"
    name="Delivery System"
    autocompset="yes">

    <!-- Value -->
    <field
      id="dsRange"
      name="System Range"
      type="derived"
      maxlength="10">
      </field>

    <!-- Summary -->
    <field
      id="dsDamage"
      name="System Damage"
      type="derived">
      </field>
	  
    <!-- Assign any derived special notes to the appropriate field -->
    <eval index="1" phase="Final" priority="1000"><![CDATA[
      var range as string
	  var damage as number
	  
      range = field[dsRange].text
	  damage = field[dsDamage].value
	  
	  perform parent.setfocus
	  
	  focus.field[wpShipWpnRange].text = range
	  focus.field[wpShipBaseDmgBon].value += damage
      
      ]]></eval>	
	  
    </component>

  <!-- Energy component
        Starship Energy Weapons (Phasers, Disruptors, etc.) use this component
  -->
  <component
    id="Energy"
    name="Energy Weapon"
    autocompset="no">
	  
    <!-- Torpedos don't include ship scale in their damage calculations -->
    <tag group="ShipWeaponType" tag="Energy"/>
	
	<eval index="1" phase="Final" priority="500"><![CDATA[
      field[wpShipBaseDmgBon].value += hero.childfound[mscShip].field[bonWeaponDmg].value
      
      ]]></eval>
	  
    </component>

  <!-- Torpedo component
        Starship Torpedoes use this component in addition to the Energy component to handle torpedo-specific details
  -->
  <component
    id="Torpedo"
    name="Torpedo"
    autocompset="no">
	  
    <!-- Torpedos don't include ship scale in their damage calculations -->
    <tag group="ShipWeaponType" tag="Torpedo"/>
    <tag group="Weapon" tag="NoScale"/>
	
	<eval index="1" phase="Final" priority="500"><![CDATA[
      field[wpShipBaseDmgBon].value += hero.childfound[mscShip].field[bonWeaponDmg].value
      
      ]]></eval>
	  
    </component>
	
  <!-- Mine component
        Starship Mines use this component in addition to the Energy component to handle mine specific details
  -->
  <component
    id="Mine"
    name="Mine"
    autocompset="no">
	  
    <!-- Torpedos don't include ship scale in their damage calculations -->
    <tag group="ShipWeaponType" tag="Mine"/>
    <tag group="Weapon" tag="NoScale"/>
	  
    </component>
	
  <component
    id="WeaponStarship"
    name="Weapon (Starship)"
    autocompset="yes">
	
    <!-- Calculate the net attack roll for the weapon -->
    <eval index="1" phase="Ability" priority="7000" ><![CDATA[
	  if (tagis[Helper.AddedWeapon] <> 0) then
        #resspent[resAddWeapons] += 1
		endif
	  
      ]]></eval>
    </component>
	
  <component
    id="StarshipSpecial"
    name="Special Rule"
    autocompset="no">
	  
    <identity group="ShipSpecialRule"/>
	
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Ship.?]
      perform forward[ShipSpecialRule.?]
      ]]></eval>
	  
    </component>	
	
  <!-- Appearance component
        Used for specifying a bonus for Supporting characters making multiple appearances
  -->
  <component
    id="Appearance"
    name="Appearances"
    autocompset="no">

    </component>

  <!-- Refit component
        Used for specifying a bonus for Supporting characters making multiple appearances
  -->
  <component
    id="Refit"
    name="Refits"
    autocompset="no">

    <!-- Each ability that is added by the user costs 1 slot -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      ~we must ignore bootstrapped abilities from races and abilities added via advances
      hero.child[resShipRefits].field[resSpent].value += 1
      ]]></eval>
	  
    </component>

  <!-- MissionPod component
        Used for specifying a bonus for Supporting characters making multiple appearances
  -->
  <component
    id="MissionPod"
    name="Mission Pod"
    autocompset="no">

    <!-- Each ability that is added by the user costs 1 slot -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      ~we must ignore bootstrapped abilities from races and abilities added via advances
      hero.child[resShipPod].field[resSpent].value += 1
      ]]></eval>
	  
    </component>
	
  <component
    id="ServiceRecord"
    name="Service Record"
    autocompset="yes">
	
    <!-- Each race needs its own identity tag to configure the hero appropriately -->
    <identity group="ServiceRecord"/>
    <identity group="HasServiceRec"/>

    <!-- Track the race on the actor by assigning the appropriate tags -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[ServiceRecord.?]
      perform forward[HasServiceRec.?]
	  perform forward[StarshipSelected.?]
      ]]></eval>
	  
    </component>
	
  <component
    id="BonusAttrSys"
    name="Appearances"
    autocompset="yes">
	
      <!-- Systems -->
      <field
        id="bonComm"
        name="Command"
        type="derived">
        </field>

      <field  
        id="bonComp"
        name="Conn"
        type="derived">
        </field>

      <field
        id="bonEngines"
        name="Engineering"
        type="derived">
        </field>

      <field
        id="bonSens"
        name="Medicine"
        type="derived">
        </field>

      <field
        id="bonStruct"
        name="Security"
        type="derived">
        </field>

      <field
        id="bonWeap"
        name="Science"
        type="derived">
        </field>

    <!-- Track the race on the actor by assigning the appropriate tags -->
    <eval index="1" phase="PreAbility" priority="1000"><![CDATA[
      #bonuscommand[] += field[bonComm].value
      #bonusconn[] += field[bonComp].value
      #bonusengineering[] += field[bonEngines].value
      #bonusmedicine[] += field[bonSens].value
      #bonussecurity[] += field[bonStruct].value
      #bonusscience[] += field[bonWeap].value
      ]]></eval>
		
    </component>
	
  <component
    id="BonusDiscDept"
    name="Appearances"
    autocompset="yes">
	
      <!-- Profile Departments -->
      <field
        id="bonCmd"
        name="Command"
        type="derived">
        </field>

      <field  
        id="bonConn"
        name="Conn"
        type="derived">
        </field>

      <field
        id="bonEng"
        name="Engineering"
        type="derived">
        </field>

      <field
        id="bonMed"
        name="Medicine"
        type="derived">
        </field>

      <field
        id="bonSecur"
        name="Security"
        type="derived">
        </field>

      <field
        id="bonSci"
        name="Science"
        type="derived">
        </field>

    <!-- Track the race on the actor by assigning the appropriate tags -->
    <eval index="1" phase="PreAbility" priority="1000"><![CDATA[
      #bonuscommand[] += field[bonCmd].value
      #bonusconn[] += field[bonConn].value
      #bonusengineering[] += field[bonEng].value
      #bonusmedicine[] += field[bonMed].value
      #bonussecurity[] += field[bonSecur].value
      #bonusscience[] += field[bonSci].value
      ]]></eval>
		
    </component>	
	
  <!-- Compsets -->

  <!-- Frame - all races derive from this compset -->
  <compset
    id="Frame"
    forceunique="yes">
    <compref component="Frame"/>
    <compref component="Custom"/>
    <compref component="UserSelect"/>
    <compref component="SourceInfo"/>
    </compset>
	
  <!-- Frame - all races derive from this compset -->
  <compset
    id="Profile"
    forceunique="yes">
    <compref component="Profile"/>
    <compref component="UserSelect"/>
    <compref component="Domain"/>
    <compref component="Custom"/>
    <compref component="SourceInfo"/>
    </compset>
	
  <!-- Frame - all races derive from this compset -->
  <compset
    id="MissionPod">
    <compref component="MissionPod"/>
    <compref component="BonusAttrSys"/>
    <compref component="BonusDiscDept"/>
    <compref component="SourceInfo"/>
    </compset>
	
  <!-- Transact - all transactions utilize this compset -->
  <compset
    id="Appearance">
    <compref component="Appearance"/>
	<compref component="UserSelect"/>
    </compset>
	
  <!-- Transact - all transactions utilize this compset -->
  <compset
    id="Refit">
    <compref component="Refit"/>
	<compref component="UserSelect"/>
    </compset>
	
  <!-- Energy - Starship Energy weapons -->
  <compset
    id="Energy"
    stackable="yes">
    <compref component="Energy"/>
    <compref component="BaseWeaponShip"/>
    <compref component="WeaponStarship"/>
    <compref component="WeaponBase"/>
    <compref component="Equippable"/>
    <compref component="Gear"/>
    </compset>
	
  <!-- Torpedo - Starship Torpedo weapons -->
  <compset
    id="Torpedo"
    stackable="yes">
    <compref component="Torpedo"/>
    <compref component="BaseWeaponShip"/>
    <compref component="WeaponStarship"/>
    <compref component="WeaponBase"/>
    <compref component="Equippable"/>
    <compref component="Gear"/>
    </compset>	
	
  <!-- Mine - Starship Mine weapons -->
  <compset
    id="Mine"
    stackable="yes">
    <compref component="Mine"/>
    <compref component="BaseWeaponShip"/>
    <compref component="WeaponStarship"/>
    <compref component="WeaponBase"/>
    <compref component="Equippable"/>
    <compref component="Gear"/>
    </compset>
	
  <!-- StarshipSpecial - Starship special rules -->
  <compset
    id="StarshipSpecial"
    stackable="no">
    <compref component="StarshipSpecial"/>
    <compref component="SpecialTab"/>
    <compref component="UserSelect"/>
    <compref component="Domain"/>
    <compref component="Custom"/>
    </compset>	
  </document>
