<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains an assortment of things used solely for validation reporting.
      Each thing has one or more "evalrule" scripts that verify facets of each actor
      and report appropriate error messages if not satisfied.

     If you prefer, you could instead have a small number of things with numerous
     "evalrule" scripts associated with each. The approach used below is to have lots
     of things with scripts targeted at a narrow purpose, but there is no reason you
     couldn't have a few things with lots of scripts targeted as a wide range of
     purposes. By having lots of separate things, the name of each can be leveraged
     for use within the validation error report, which can often improve the clarity
     and usefulness of the validation messages.
-->

<document signature="Hero Lab Data">

  <!-- Validate facets of the race -->
  <thing
    id="valSpecies"
    name="Species"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have a race selected -->
    <evalrule index="1" phase="Validate" priority="8000" message="Must be selected"><![CDATA[
	  validif (hero.tagis[CharType.typStarship] + hero.tagis[CharType.typSmallCraft] <> 0)
	  
      ~if we have a race selected, we're good
      validif (hero.tagis[Species.?] <> 0)
	  
	  ~if we're on the lifepath, mark lifepath tab invalid
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)	  
	  container.panelvalid[lifepath] = 0
	  
      ]]></evalrule>

    </thing>

 <!-- Attributes thing for validation reporting -->
  <thing
    id="valAttrib"
    name="Attributes"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have all special abilities selected -->
    <evalrule index="1" phase="Validate" priority="8000" severity="error" message="You may only have one attribute at maximum."><![CDATA[
      ~if we're not a Main or Supporting character, we're good.
	  validif (hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport] = 0)
	  
	  var maxCount as number
	  foreach pick in hero where "component.AttrSys"
	    maxCount += eachpick.tagcount[Helper.Maximum]
		nexteach

      ~we have a negative or zero quantity left, we're good
      validif (maxCount <= 1)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>
	  
    <!-- Make sure that we have all attributes selected -->
    <evalrule index="2" phase="Validate" priority="8000" severity="error" message="Not enough selected"><![CDATA[
      ~if we're not a Main or Supporting character, we're good.
	  validif (hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport] = 0)

	  ~If we're using the Lifepath creation method, we're good.
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)

      ~we have a negative or zero quantity left, we're good
      validif (hero.child[resAttrib].field[resLeft].value <= 0)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>
	  
    <!-- Make sure that we don't have too many attributes selected -->
    <evalrule index="3" phase="Validate" priority="8000" severity="error" message="Too many selected"><![CDATA[
      ~if we're not a Main or Supporting character, we're good.
	  validif (hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport] = 0)

	  ~If we're using the Lifepath creation method, we're good.
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)
	  
      ~we have a positive or zero quantity left, we're good
      validif (hero.child[resAttrib].field[resLeft].value >= 0)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>
    </thing>
	
 <!-- Discipline thing for validation reporting -->
  <thing
    id="valDiscip"
    name="Disciplines"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have all special abilities selected -->
    <evalrule index="1" phase="Validate" priority="8000" severity="error" message="You may only have one discipline at maximum."><![CDATA[
      ~if we're not a Main or Supporting character, we're good.
	  validif (hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport] = 0)
	  
	  var maxCount as number
	  foreach pick in hero where "component.DiscDept"
	    maxCount += eachpick.tagcount[Helper.Maximum]
		nexteach

      ~we have a negative or zero quantity left, we're good
      validif (maxCount <= 1)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>
	  
    <!-- Make sure that we have all disciplines selected -->
    <evalrule index="2" phase="Validate" priority="8000" severity="error" message="Not enough selected"><![CDATA[
      ~if we're not a Main or Supporting character, we're good.
	  validif (hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport] = 0)

	  ~If we're using the Lifepath creation method, we're good.
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)
	  
      ~we have a negative or zero quantity left, we're good
      validif (hero.child[resDiscip].field[resLeft].value <= 0)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>

    <!-- Make sure that we don't have too many disciplines selected -->
    <evalrule index="3" phase="Validate" priority="8000" severity="error" message="Too many selected"><![CDATA[
      ~if we're not a Main or Supporting character, we're good.
	  validif (hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport] = 0)

	  ~If we're using the Lifepath creation method, we're good.
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)

      ~we have a positive or zero quantity left, we're good
      validif (hero.child[resDiscip].field[resLeft].value >= 0)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>
    </thing>
	
 <!-- Talents thing for validation reporting -->
  <thing
    id="valTalent"
    name="Talents"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have all special abilities selected -->
    <evalrule index="1" phase="Validate" priority="8000" severity="error" message="Not enough selected"><![CDATA[
      ~we have a negative or zero quantity left, we're good
      validif (hero.child[resTalent].field[resLeft].value <= 0)

      ~mark associated tabs as invalid
      container.panelvalid[talents] = 0
      ]]></evalrule>

    <!-- Make sure that we don't have too many special abilities selected -->
    <evalrule index="2" phase="Validate" priority="8000" severity="error" message="Too many selected"><![CDATA[
      ~we have a positive or zero quantity left, we're good
      validif (hero.child[resTalent].field[resLeft].value >= 0)

      ~mark associated tabs as invalid
      container.panelvalid[talents] = 0
      ]]></evalrule>

    </thing>
	
 <!-- Values thing for validation reporting -->
  <thing
    id="valValue"
    name="Values"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have all special abilities selected -->
    <evalrule index="1" phase="Validate" priority="8000" severity="error" message="Not enough selected"><![CDATA[
      ~we have a negative or zero quantity left, we're good
      validif (hero.child[resValue].field[resLeft].value <= 0)

      ~mark associated tabs as invalid
      container.panelvalid[values] = 0
      ]]></evalrule>

    <!-- Make sure that we don't have too many special abilities selected -->
    <evalrule index="2" phase="Validate" priority="8000" severity="error" message="Too many selected"><![CDATA[
      ~we have a positive or zero quantity left, we're good
      validif (hero.child[resValue].field[resLeft].value >= 0)

      ~mark associated tabs as invalid
      container.panelvalid[values] = 0
      ]]></evalrule>

    </thing>
 <!-- Values thing for validation reporting -->
  <thing
    id="valFocus"
    name="Focus"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have all special abilities selected -->
    <evalrule index="1" phase="Validate" priority="8000" severity="error" message="Not enough selected"><![CDATA[
      ~we have a negative or zero quantity left, we're good
      validif (hero.child[resFocus].field[resLeft].value <= 0)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>

    <!-- Make sure that we don't have too many special abilities selected -->
    <evalrule index="2" phase="Validate" priority="8000" severity="error" message="Too many selected"><![CDATA[
      ~we have a positive or zero quantity left, we're good
      validif (hero.child[resFocus].field[resLeft].value >= 0)

      ~mark associated tabs as invalid
      container.panelvalid[basics] = 0
      ]]></evalrule>

    </thing>
	
  <!-- events thing for validation reporting -->
  <thing
    id="valEvents"
    name="Events"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we have all special abilities selected -->
    <evalrule index="1" phase="Validate" priority="8000" severity="warning" message="Not enough selected"><![CDATA[
      ~we have a negative or zero quantity left, we're good
      validif (hero.child[resEvent].field[resLeft].value <= 0)

      ~mark associated tabs as invalid
      container.panelvalid[events] = 0
	  
	  ~if we're on the lifepath, mark lifepath tab invalid
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)	  
	  container.panelvalid[lifepath] = 0
	  
      ]]></evalrule>

    <!-- Make sure that we don't have too many special abilities selected -->
    <evalrule index="2" phase="Validate" priority="8000" message="Too many selected"><![CDATA[
      ~we have a positive or zero quantity left, we're good
      validif (hero.child[resEvent].field[resLeft].value >= 0)

      ~mark associated tabs as invalid
      container.panelvalid[events] = 0
	  	  
	  ~if we're on the lifepath, mark lifepath tab invalid
	  validif (hero.tagis[CreateMethod.Lifepath] <> 0)	  
	  container.panelvalid[lifepath] = 0
	  
      ]]></evalrule>

    </thing>
	
  <!-- Hands thing for validation reporting -->
  <thing
    id="valHands"
    name="Hands"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we don't have too many hands worth of gear equipped -->
    <evalrule index="1" phase="Validate" priority="8000" message="Equipped gear requires too many hands" name="Check Hands"><![CDATA[
      ~if we have no more than two hands of gear equipped, we're good
      validif (hero.tagcount[Hero.Hand] <= herofield[acHands].value)

      ~mark associated tabs as invalid
      container.panelvalid[armory] = 0
      ]]></evalrule>

    </thing>


  <!-- Armor thing for validation reporting -->
  <thing
    id="valArmor"
    name="Armor"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we don't have multiple sets of armor equipped -->
    <evalrule index="1" phase="Validate" priority="8000" message="Multiple suits of armor equipped"><![CDATA[
      ~if we have no more than one set of armor equipped, we're good
      validif (hero.tagcount[Armor.?] <= 1)

      ~mark associaated tabs as invalid
      container.panelvalid[armory] = 0
      ]]></evalrule>

    </thing>


  <!-- Shield thing for validation reporting -->
  <thing
    id="valShields"
    name="Shields"
    compset="Simple">
    <tag group="Helper" tag="Bootstrap"/>

    <!-- Make sure that we don't have multiple shields equipped -->
    <evalrule index="1" phase="Validate" priority="8000" message="Multiple shields equipped"><![CDATA[
      ~if we have no more than one set of armor equipped, we're good
      validif (hero.tagcount[Shield.?] <= 1)

      ~mark associated tabs as invalid
      container.panelvalid[armory] = 0
      ]]></evalrule>

    </thing>


    </document>
