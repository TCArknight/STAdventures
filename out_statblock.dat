<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of a traditional "statblock" output for the
      game system. The statblock is defined as a dossier and then uses an assortment
      of procedures to orchestrate the synthesis of the output.
-->

<document signature="Hero Lab Data">


  <!-- Procedure sbname
        Get the character's name, using a suitable default if unnamed. The name is
        placed in the "name" text variable.

        Outbound parameter: name
  -->
  <procedure id="sbname" scripttype="synthesize"><![CDATA[
    var name as string
	var temp as string
	var temp1 as number
	
	temp1 = hero.tagis[CharType.typMain] + hero.tagis[CharType.typSupport]
	
	if (compare(left(hero.actorname,8),"Unnamed ") = 0) then
       temp = hero.tagnames[CharType.?,"+"]
	  
	  if (#ischaracter[] <> 0) then 
	     name = "Unnamed Character"
	  elseif (#isstarship[] <> 0) then 
	     name = "Unnamed Ship"
	  elseif (#isstarbase[] <> 0) then 
         name = "Unnamed Starbase"
	  endif
    else
	  name = hero.actorname
    endif
	  
    ]]></procedure>


  <!-- Procedure sbtraits
        Output all of the traits that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sbtraits" scripttype="synthesize"><![CDATA[
    var tagexpr as string
    var ismore as number
    ismore = 0
    foreach pick in hero where tagexpr
      if (ismore <> 0) then
        append ", "
        endif
      if (eachpick.tagis[component.AttrSys] = 1) then
	    append eachpick.field[asName].text & " " & eachpick.field[abiFinal].text
	  elseif (eachpick.tagis[component.DiscDept] = 1) then
	    append eachpick.field[ddName].text & " " & eachpick.field[abiFinal].text
	  elseif (eachpick.tagis[component.Trait] = 1) then
	    append eachpick.field[name].text
	  else
	    append eachpick.field[name].text & " " & eachpick.field[abiFinal].text
	  endif
	  
      ismore = 1
      nexteach
    append @newline
    ]]></procedure>

  <!-- Procedure sbtalents
        Output all of the traits that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sbtalents" scripttype="synthesize"><![CDATA[
    var tagexpr as string
    var ismore as number
    ismore = 0
    foreach pick in hero where tagexpr
      if (ismore <> 0) then
        append ", "
        endif
      append eachpick.field[name].text
      ismore = 1
      nexteach
    append @newline
    ]]></procedure>
	
  <!-- Procedure sbservice
        Output all of the traits that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sbservice" scripttype="synthesize"><![CDATA[
    var role as string
	var assign as string
	var txt as string
	
	txt = ""
	role = hero.findchild[Service].field[serRole].text
	assign = hero.findchild[Service].field[serAssign].text
	
	if (empty(role) <> 0) then
      txt = ""
	else
	  txt = role
      endif
	  
	if (empty(assign) <> 0) then
      txt = txt
	else
	  if (empty(txt) <> 0) then
	    txt = assign
      else
	    txt &= ", " & assign
	    endif
      endif
	
    append txt
    append @newline
    ]]></procedure>
	
  <!-- Procedure sbvalfoc
        Output all of the values or focuses that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sbvalfoc" scripttype="synthesize"><![CDATA[
    var tagexpr as string
    var ismore as number
    ismore = 0
    foreach pick in hero where tagexpr
      if (ismore <> 0) then
        append ", "
        endif
      append eachpick.field[name].text
      ismore = 1
      nexteach
    append @newline
    ]]></procedure>	
	
  <!-- Procedure sbweapons
        Output all of the weapons possessed by the character, listing equipped
        weapons first and including attack values, damage, and ranges for eachpick.
  -->
  <procedure id="sbweapons" scripttype="synthesize"><![CDATA[
    var ismore as number
    append @boldon & "Weapons/Attacks: " & @boldoff & @newline
    ~output a list of all weapons (equipped first)
    ismore = 0
    foreach pick in hero from WeaponBase sortas Armory
      ismore = 1
	  if (eachpick.tagis[component.WeapEnergy] = 0) then
        append @indent & eachpick.field[wpNetAtk].value 
		append " - "
		endif
	  
	  append eachpick.field[name].text
      append " - " & eachpick.field[wpDamageSummarySB].text
		
	  if (eachpick.field[wpQualSumm].isempty = 0) then
	    if (compare(eachpick.field[wpQualSumm].text,"-") <> 0) then
	      append " (" & eachpick.field[wpQualSumm].text & " )"
		  endif
		endif
		
      if (eachpick.field[grIsEquip].value <> 0) then
        append " (Equipped)"
        endif
      if (eachpick.tagis[component.WeapRange] <> 0) then
        append " (Rng: " & eachpick.field[wpShort].text & "/" & eachpick.field[wpMedium].text & "/" & eachpick.field[wpLong].text & ")"
        endif
      append @newline
      nexteach
    ~if we have no weapons, output that fact
    if (ismore = 0) then
      append @indent & "-none-" & @newline
      endif
    ]]></procedure>


  <!-- Procedure sbarmor
        Output all of the armor possessed by the character, listing equipped gear
        first and including the defense value for eachpick.
  -->
  <procedure id="sbarmor" scripttype="synthesize"><![CDATA[
    var ismore as number
    append @boldon & "Armor: " & @boldoff & @newline
    ~output the details of all armor (equipped first)
    ismore = 0
    foreach pick in hero from Defense sortas Armory
      ismore = 1
      append @indent & eachpick.field[defResist].text & " - " & eachpick.field[name].text
      if (eachpick.field[grIsEquip].value <> 0) then
        append " (Equipped)"
        endif
      append @newline
      nexteach
    ~if we have no armor, output that fact
    if (ismore = 0) then
      append @indent & "-none-" & @newline
      endif
    ]]></procedure>

  <!-- Procedure sbgear
        Output all of the armor possessed by the character, listing equipped gear
        first and including the defense value for eachpick.
  -->
  <procedure id="sbgear" scripttype="synthesize"><![CDATA[
    var ismore as number
    append @boldon & "Equipment: " & @boldoff & @newline
    ~output the details of all gear (equipped first)
	var ismore as number
    ismore = 0
    ~ foreach pick in hero from Equipment where "!Print.NoPrint"
    foreach pick in hero from Gear where "!(Print.NoPrint|Equipment.Natural)"
      if (ismore <> 0) then
        append ", "
        endif
      append eachpick.field[name].text
      ismore = 1
      nexteach
	
	~if we have no equipment, output that fact
    if (ismore = 0) then
      append @indent & "-none-" & @newline
      endif
	  
    append @newline
    ]]></procedure>

  <!-- Procedure sbtrackres
        Output all of the tracked resources possessed by the character, if the
        right output source is enabled.
  -->
  <procedure id="sbtrackres" scripttype="synthesize"><![CDATA[
    doneif (hero.tagis[source.ShowTrackR] = 0)

    var ismore as number
    append @boldon & "Tracked Resources: " & @boldoff & @newline
    ~output the details of all resources
    ismore = 0
    foreach pick in hero from Tracker where "!Hide.Tracker"
      ismore = 1
      append @indent & eachpick.field[name].text & " - " & eachpick.field[trkUser].text
      append @newline
      nexteach
    ~if we have no resources, output that fact
    if (ismore = 0) then
      append @indent & "-none-" & @newline
      endif
    ]]></procedure>


  <!-- Procedure sbnpcinfo
        Checks all npc info picks with a certain tag expression and appends
        their info to the text.
  -->
  <procedure id="sbnpcinfo" scripttype="synthesize"><![CDATA[
    var title as string
    var tagexpr as string

    ~go through the npc info picks, adding them to the info string
    var info as string
    info = ""
    foreach pick in hero from NPCInfo where tagexpr sortas explicit
      if (eachpick.field[npcInfo].isempty = 0) then
        info &= eachpick.field[name].text & ": " & eachpick.field[npcInfo].text & @newline
        endif
      nexteach

    ~if we ended up with any text, append it to our output with the
    ~appropriate title
    if (empty(info) = 0) then
      append @newline & "===== " & title & " =====" & @newline
      append info
      endif
    ]]></procedure>
	
  <!-- Procedure sbmaininfo -->
  <procedure id="sbmaininfo" scripttype="synthesize"><![CDATA[
    var txt as string
    var tagexpr as string

	~output any rank
	txt = hero.findchild[Service].field[serRank].text
	if (empty(txt) <> 0) then
	  txt = "-none-"
	  endif
	append @boldon & "Rank: " & @boldoff & txt & @newline
	
	~output any assignment
	append @boldon & "Assignment/Role: " & @boldoff 
	call sbservice
			
	~output any species
	txt = hero.findchild[Species].field[name].text
	if (empty(txt) <> 0) then
	  txt = "-none-"
	  endif
	append @boldon & "Species: " & @boldoff & txt & @newline

	~output age
	append @boldon & "Age: " & @boldoff & hero.child[mscPerson].field[perAge].text & @newline
	
    ]]></procedure>
	
  <!-- Procedure sbshipinfo -->
  <procedure id="sbshipinfo" scripttype="synthesize"><![CDATA[
    var txt as string
    var tagexpr as string
	
	~output ship info
	txt = hero.findchild[ShipInfo].field[shipClass].text
	append @boldon & "Ship Class: " & @boldoff & txt & @newline & @newline
	
	~output ship service
	~txt = hero.findchild[ShipInfo].field[shipServ].text
	~append @boldon & "Service Entry: " & @boldoff & txt & @newline & @newline
			
    txt = hero.findchild[ShipInfo].field[shipScale].text
	append @boldon & "Scale: " & @boldoff & txt & @newline
    
	txt = hero.findchild[ShipInfo].field[shipPower].text
	append @boldon & "Power: " & @boldoff & txt & @newline
    
	txt = hero.findchild[ShipInfo].field[shipShield].text
	append @boldon & "Shields: " & @boldoff & txt & @newline
    
	txt = hero.findchild[ShipInfo].field[shipRes].text
	append @boldon & "Resistance: " & @boldoff & txt & @newline & @newline
	
    txt = hero.findchild[ShipInfo].field[shipCrew].text
	append @boldon & "Crew Support: " & @boldoff & txt & @newline 
	
	if (hero.tagis[Ship.SmallCraft] <> 0) then
      txt = hero.findchild[ShipInfo].field[shipCrewSumm].text
	  append @boldon & "Crew Details: " & @boldoff & txt & @newline
	  endif
	  
	append @newline
	
    ]]></procedure>
	
  <!-- Procedure sbstats -->
  <procedure id="sbstats" scripttype="synthesize"><![CDATA[
    var txt as string
    var tagexpr as string

	~output attributes / systems
	append @boldon & herofield[acASHdrTxt].text & "s: " & @boldoff
	tagexpr = "component.AttrSys"
	call sbtraits

	~output disciplines / dept
	append @boldon & herofield[acDDHdrTxt].text & "s: " & @boldoff
	tagexpr = "component.DiscDept"
	call sbtraits
			
    ]]></procedure>

  <!-- Define the statblock as a text-based dossier. The "synthesize" script actually
        generates the output.
  -->
  <dossier
    id="statblock"
    name="Character Statblock">
    <dossier_text
      styles="plain+html+bbcode+wikitext+print"
      grouping="statblock">
      <synthesize><![CDATA[
        var txt as string
        var tagexpr as string

		~start by getting our name
		var name as string
		call sbname

		~output our name
		append @boldon & "Name: " & @boldoff & name & @newline

		if (#ischaracter[] <> 0) then
          call sbmaininfo
		  call sbstats

          ~output traits
		  append @boldon & "Traits: " & @boldoff
		  tagexpr = "component.Trait"
		  call sbtraits
		  
          ~output focuses
		  append @boldon & "Focuses: " & @boldoff
		  tagexpr = "component.Focus"
		  call sbvalfoc

		  ~output values
		  append @boldon & "Values: " & @boldoff
		  tagexpr = "component.Value"
		  call sbvalfoc
					
		  ~output special abilities
		  append @boldon & "Talents: " & @boldoff
		  tagexpr = "component.Talent"
		  call sbtalents

		  ~output Stress
		  append @newline & @boldon & "Stress: " & @boldoff & hero.childfound[trStress].field[abiFinal].text & @newline
		  ~output Resistance
		  append @boldon & "Resistance: " & @boldoff & hero.childfound[trResist].field[abiFinal].text & @newline & @newline

		  ~output weapons/attacks
		  call sbweapons

		  ~output armor
		  call sbarmor

		  ~output gear
		  call sbgear

		  ~output tracked resources
		  call sbtrackres

		  ~output NPC details if this character is a NPC - if any field for any
		  ~of the three blocks of text is set, output that block
		  if (hero.tagis[CharType.typSupport] = 1) then
			var tagexpr as string
			var title as string

			~values of up to 15 are basic details only
			tagexpr = "val:explicit.? <= 15"
			title = "Basic Details"
			call sbnpcinfo

			~values of up to 30 are tactics
			tagexpr = "val:explicit.? > 15 & val:explicit.? <= 30"
			title = "Tactics"
			call sbnpcinfo

			~values of up to 45 are ecology
			tagexpr = "val:explicit.? > 30 & val:explicit.? <= 45"
			title = "Ecology"
			call sbnpcinfo

			~anything else is extra
			tagexpr = "val:explicit.? > 45"
			title = "Additional Details"
			call sbnpcinfo
			
			endif
		else
		  ~ Starship Info
		  call sbshipinfo
		  call sbstats

          ~output traits
		  append @newline
		  append @boldon & "Traits: " & @boldoff
		  tagexpr = "component.Trait"
		  call sbtraits
		  
		  ~output special abilities
		  append @boldon & "Talents: " & @boldoff
		  tagexpr = "component.Talent"
		  call sbtalents
		  
		  append @newline
		  ~output weapons/attacks
		  call sbweapons
		  
		  ~Overview
		  ~txt = hero.findchild[ShipInfo].field[shipOver].text
		  ~append @newline & @boldon & "Overview: " & @boldoff & txt & @newline
		  
		endif
        ]]></synthesize>
      </dossier_text>
    </dossier>


  </document>
