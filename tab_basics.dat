<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the "Basics" tab panel. This tab is where
      the user configures that attributes and skills of the character.

      All public visual elements used with this tab panel start with the prefix "ba"
      to associate them with the tab.
-->

<document signature="Hero Lab Data">


  <!-- baAttrib portal
        Presents a fixed table that consists of the various attributes for the
        character. The "explicit" sortset is used to enforce a hand-numbered
        ordering of the attributes. Since the full list is short enough to always
        be visible, the table has no scroller.

        We use a "headertitle" script to place a suitable title above the table.
  -->
  <portal
    id="baAttrib"
    style="tblOuter">
    <table_fixed
      component="AttrSys"
      showtemplate="baAttrPick"
      showsortset="explicit"
      scrollable="no">
      <headertitle><![CDATA[
        @text = herofield[acASHdrTxt].text
		
		doneif (state.iscreate = 0)
		
        @text &= "  -  " & hero.child[resAttrib].field[resSummary].text
        ]]></headertitle>
      </table_fixed>
    </portal>

  <!-- baDiscip portal
        Presents a fixed table with all derived traits in it. The sortset allows
        us to dictate the order of display via a hand-numbered sequence. All traits
        are always visible, so we don't need a scroller.
  -->
  <portal
    id="baDiscip"
    style="tblOuter">
    <table_fixed
      component="DiscDept"
      showtemplate="baDisPick"
      showsortset="explicit"
      scrollable="no">
      <headertitle><![CDATA[
        @text = herofield[acDDHdrTxt].text
		
		doneif (state.iscreate = 0)
		
        @text &= "  -  " & hero.child[resDiscip].field[resSummary].text
        ]]></headertitle>
      </table_fixed>
    </portal>

  <!-- baFocus portal -->
  <portal
    id="baFocus"
    style="tblOuter">
    <table_dynamic
      component="Focus"
      showtemplate="baFocPick"
      choosetemplate="SimpleItem"
      choosesortset="FocusSort"
      showfixedlast="yes"
      addpick="resFocus">
      <candidate>!Hide.Focus</candidate>
      <titlebar><![CDATA[
        @text = "Add a Focus - " & hero.child[resFocus].field[resSummary].text
        ]]></titlebar>
      <description/>
      <headertitle><![CDATA[
        @text = "Focuses: " & hero.child[resFocus].field[resSummary].text
        ]]></headertitle>
      <additem><![CDATA[
        ~if we're in advancement mode, we've been frozen, so display accordingly
        if (state.iscreate = 0) then
          @text = "{text clrgrey}Add Focuses Via Advances Tab"
          done
          endif

        ~set the color based on whether the proper number of slots are allocated
        if (field[resLeft].value = 0) then
          @text = "{text clrgrey}"
        elseif (field[resLeft].value < 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Add New Focus"
        ]]></additem>
      </table_dynamic>
    </portal>

		
    <portal
      id="InfoTitle"
      style="lblTitle">
      <label
        istitle="yes"
        text="Ship Information">
        </label>
      </portal>
	  
  <!-- shShipInfo template -->
  <template
    id="shShipInfo"
    name="Ship Info"
    compset="ShipInfo"
    marginhorz="13"
    marginvert="9">
	  
    <portal
      id="lblScale"
      style="lblNormal">
      <label
        text="Scale:">
        </label>
      </portal>

    <portal
      id="scale"
      style="lblBrdCent">
      <label
        field="shipScale">
        </label>
      </portal>

	<portal
      id="lblPower"
      style="lblNormal">
      <label
        text="Power:">
        </label>
      </portal>

    <portal
      id="power"
      style="lblBrdCent">
      <label
        field="shipPower">
        </label>
      </portal>

	<portal
      id="lblShield"
      style="lblNormal">
      <label
        text="Shields:">
        </label>
      </portal>

    <portal
      id="shield"
      style="lblBrdCent">
      <label
        field="shipShield">
        </label>
      </portal>


	<portal
      id="lblResist"
      style="lblNormal">
      <label
        text="Resistance:">
        </label>
      </portal>

    <portal
      id="resist"
      style="lblBrdCent">
      <label
        field="shipRes">
        </label>
      </portal>

	<portal
      id="lblCrew"
      style="lblNormal">
      <label
        text="Crew Support:">
        </label>
      </portal>

    <portal
      id="crew"
      style="lblBrdCent">
      <label
        field="shipCrew">
        </label>
      </portal>

	<portal
      id="lblCrewDetails"
      style="lblNormal">
      <label
        text="Crew:">
        </label>
      </portal>

    <portal
      id="crewdetails"
      style="lblBrdCent">
      <label
        field="shipCrewSumm">
        </label>
      </portal>	  
    <position><![CDATA[

      ~position the title to span the full width
  
	  portal[lblPower].width = 100
	  portal[lblScale].width = 100
	  portal[power].width = 100
	  portal[scale].width = 100
	  portal[lblShield].width = 100
	  portal[shield].width = 100
	  portal[lblResist].width = 100
	  portal[resist].width = 100
	  portal[lblCrew].width = 100
	  portal[crew].width = 100
	  portal[lblCrewDetails].width = 100
	  portal[crewdetails].width = 300
	  
      ~position power at the top left
      portal[lblPower].top = 5
      portal[lblPower].left = 0
	  
      perform portal[power].alignrel[ltor,lblPower,10]
	  portal[power].top = portal[lblPower].top
	  portal[lblPower].visible = 1 - hero.tagis[source.2ndEdition]
	  portal[power].visible = portal[lblPower].visible
	  
      ~position scale at the top right
      portal[lblScale].top = portal[lblPower].top
      portal[lblScale].left = portal[power].right + 10
	  perform portal[scale].alignrel[ltor,lblScale,10]
	  portal[scale].top = portal[lblScale].top
	  
      portal[lblShield].top = portal[lblPower].bottom + 10
	  portal[lblShield].left = portal[lblPower].left
	  portal[shield].top = portal[lblShield].top
	  perform portal[shield].alignrel[ltor,lblShield,10]
	  
      portal[lblResist].top = portal[lblScale].bottom + 10
	  portal[lblResist].left = portal[lblScale].left
	  portal[resist].top = portal[lblResist].top
	  perform portal[resist].alignrel[ltor,lblResist,10]

      portal[lblCrew].top = portal[lblShield].bottom + 20
	  portal[lblCrew].left = portal[lblShield].left
	  portal[crew].top = portal[lblCrew].top
	  perform portal[crew].alignrel[ltor,lblCrew,10]
	  
	  portal[lblCrewDetails].top = portal[lblCrew].bottom + 20
	  portal[lblCrewDetails].left = portal[lblCrew].left
	  portal[crewdetails].top = portal[lblCrewDetails].top
	  perform portal[crewdetails].alignrel[ltor,lblCrewDetails,10]
	  
	  ~ if a Small Craft, hide Crew Support
	  if (hero.tagis[CharType.typSmallCraft] <> 0) then
	    portal[lblCrew].visible = 0
	    portal[crew].visible = 0
	    endif
		
	  ~if no summary, hide portals
	  if (field[shipCrewSumm].isempty <> 0) then
	    portal[lblCrewDetails].visible = 0
	    portal[crewdetails].visible = 0
		endif

	  ~if not a Small Craft, hide portals
	  portal[lblCrewDetails].visible = hero.tagis[CharType.typSmallCraft]
	  portal[crewdetails].visible = hero.tagis[CharType.typSmallCraft]

      ~height of the portal is the botom of the lowest portal + 10
	  height = portal[lblCrewDetails].bottom + 20
	  
      ]]></position>

    </template>
	  
  <!-- baAttrPick template
        Displays one attribute within the table of attributes. We setup suitable
        margins around each template, which provides substantial spacing between
        each item and the edges of the table. Each attribute consists of its name,
        an incrementer where the user can assign the value, and an info button that
        provides details on the attribute when the user moves the mouse over it.
  -->
  <template
    id="baAttrPick"
    name="Attribute Pick"
    compset="AttrSys"
    marginhorz="13"
    marginvert="9">

    <portal
      id="name"
      style="lblLarge"
      showinvalid="yes">
      <label
        field="asName">
        </label>
      </portal>

    <portal
      id="value"
      style="incrBox">
      <incrementer
        field="abiUser">
        </incrementer>
      <mouseinfo><![CDATA[
        if (state.iscreate = 0) then
          @text = "Attributes must be modified via the Advances tab once the character is locked for play."
        elseif (autonomous = 0) then
          @text = "This trait has been improved via the Advances tab and cannot be modified further from here."
        else
          @text = "Allocate points to this attribute by clicking on the arrows to increase/decrease the number of points assigned."
          endif
        ]]></mouseinfo>
      </portal>

    <portal
      id="display"
      style="lblLarge">
      <label
        field="abiUser">
        </label>
      </portal>
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~freeze our value in advancement mode or if an advancement has modified us
      ~Note: All freezing must be done *before* any positioning is performed.
      if (state.iscreate = 0) then
        portal[value].freeze = 1
        portal[display].freeze = 1
      elseif (autonomous = 0) then
        portal[value].freeze = 1
        portal[display].freeze = 1
        endif

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[value].centervert
      perform portal[display].centervert

      ~position the info portal on the far right
      perform portal[info].alignedge[right,0]

      ~position the incrementer and display to the left of the info portal (plus a gap)
      perform portal[value].alignrel[rtol,info,-10]
      perform portal[display].alignrel[rtol,info,-10]
	  
	  if (hero.tagis[Helper.UserUnlock] = 0 ) then
	     portal[display].visible = 1
	     portal[value].visible = 0	  
	  else
	     portal[display].visible = 0
	     portal[value].visible = 1
		 endif

      ~position the name on the left and make sure its width does not exceed the available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[value].left - portal[name].left - 10)
      ]]></position>

    </template>


  <!-- baFocPick template
        Displays one skill within the table of skills. This template is very
        similar to the one used for attributes. The key differences are that this
        template is tied to skills and has slightly different margins for closer
        grouping of the items in the table.
  -->
  <template
    id="baFocPick"
    name="Focus Pick"
    compset="Focus"
    marginhorz="3"
    marginvert="3">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label>
	    <labeltext><![CDATA[
           if (tagis[Helper.CustomItem] <> 0) then
		     if (field[UserName].isempty = 0) then
               @text = field[UserName].text
			 else
               @text = "Focus: "
			   endif
           else
               @text = field[name].text
             endif
           ]]></labeltext>
        </label>
      </portal>
      
	<portal
	  id="domain"
	  style="editNormal">
	  <edit
	    field="domDomain">
	    </edit>
	  </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[domain].centervert
      perform portal[delete].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

	        
      ~if we don't need a domain, hide the portals
	  if (tagis[User.NeedDomain] = 0) then
	    portal[domain].visible = 0
	    
	    ~position the name on the left and let it use all available space
        portal[name].left = 0
        portal[name].width = minimum(portal[name].width,portal[info].left - 5)
	  else
	    ~position the domain portal to the left of the info
        perform portal[domain].alignrel[rtol,info,-150]
        ~portal[domain].width = minimum(150,portal[info].left - portal[domain].left - 100)
        portal[domain].width = 200
        ~position the name on the left and let it use all available space
        portal[name].left = 0
        portal[name].width = minimum(portal[name].width,portal[domain].left - 5)
        endif

      ~if the ability is auto-added, change its font to indicate that fact
      if (candelete = 0) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>
	
  <!-- baDisPick template
        Displays one attribute within the table of attributes. We setup suitable
        margins around each template, which provides substantial spacing between
        each item and the edges of the table. Each attribute consists of its name,
        an incrementer where the user can assign the value, and an info button that
        provides details on the attribute when the user moves the mouse over it.
  -->
  <template
    id="baDisPick"
    name="Discipline Pick"
    compset="DiscDept"
    marginhorz="13"
    marginvert="9">

    <portal
      id="name"
      style="lblLarge"
      showinvalid="yes">
      <label
        field="ddName">
        </label>
      </portal>

    <portal
      id="value"
      style="incrBox">
      <incrementer
        field="abiUser">
        </incrementer>
      <mouseinfo><![CDATA[
        if (state.iscreate = 0) then
          @text = "Departments must be modified via the Advances tab once the character is locked for play."
        elseif (autonomous = 0) then
          @text = "This trait has been improved via the Advances tab and cannot be modified further from here."
        else
          @text = "Allocate points to this department by clicking on the arrows to increase/decrease the number of points assigned."
          endif
        ]]></mouseinfo>
      </portal>
    <portal
      id="display"
      style="lblLarge">
      <label
        field="abiUser">
        </label>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~freeze our value in advancement mode or if an advancement has modified us
      ~Note: All freezing must be done *before* any positioning is performed.
      if (state.iscreate = 0) then
        portal[value].freeze = 1
        portal[display].freeze = 1
      elseif (autonomous = 0) then
        portal[value].freeze = 1
        portal[display].freeze = 1
        endif

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[value].centervert
      perform portal[display].centervert

      ~position the info portal on the far right
      perform portal[info].alignedge[right,0]

      ~position the incrementer and display to the left of the info portal (plus a gap)
      perform portal[value].alignrel[rtol,info,-10]
      perform portal[display].alignrel[rtol,info,-10]
	  
	  if (hero.tagis[Helper.UserUnlock] = 0 ) then
	     portal[display].visible = 1
	     portal[value].visible = 0	  
	  else
	     portal[display].visible = 0
	     portal[value].visible = 1
		 endif

      ~position the name on the left and make sure its width does not exceed the available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[value].left - portal[name].left - 10)
      ]]></position>

    </template>
	
  <!-- basics layout
        This layout orchestrates the display of all various visual elements that
        comprise the Basics tab. We have titles above the attributes and skills,
        the attributes and skills tables themselves, a horizontal separator, and
        the table of derived traits.

        Each of these portals and templates is identified as a "reference" by the
        layout. Using references allows distinct instances of portals and templates
        to be re-used within multiple layouts. You can even use the same template
        multiple times within a single layout.

        The visual elements used in the layout are all sized and positioned via
        the "position" script. This script is invoked to setup the dimensions of
        visual elements and trigger the positioning of the contents of those
        elements via the "render" invocation.

        The tab order between items is controlled via the optional "taborder" XML
        attribute on the various portal and template references. Within a template,
        the tab order is dictated by the order the portals are listed within the
        XML. Within a table, the tab order is dictated by the item sequence. The
        "taborder" attribute coordinates the relative sequence of portals and
        templates within the layout. In this layout, the tab order will move down
        the left column and then shift over to the right column.
  -->
  <layout
    id="basics">
    <portalref portal="baAttrib" taborder="10"/>
    <portalref portal="baDiscip" taborder="20"/>
    <portalref portal="baFocus" taborder="30"/>
	<portalref portal="InfoTitle"/>
    <portalref portal="Horizontal"/>
	<templateref template="shShipInfo" thing="mscShip" taborder="10"/>
	
    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
	if (#ischaracter[] <> 0) then
	  portal[InfoTitle].visible = 0
	  portal[InfoTitle].height = 0
	  
	  template[shShipInfo].visible = 0
	  template[shShipInfo].height = 0
	  
      ~size and position the attributes table in the top left; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baAttrib].width = width / 2 - 5
      portal[baAttrib].left = 0
      portal[baAttrib].height = height

      ~size and position the skills table in the top right; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baDiscip].width = portal[baAttrib].width
      portal[baDiscip].left = width - portal[baDiscip].width
      portal[baDiscip].height = height - portal[baDiscip].top

      ~set the separator width and position it beneath the attributes
      ~portal[Horizontal].width = portal[baAttrib].width - 30
      ~portal[Horizontal].top = portal[baAttrib].bottom + 15
      ~portal[Horizontal].left = portal[baAttrib].left + (portal[baAttrib].width - portal[Horizontal].width) / 2

      ~size and position the traits table beneath the separator; we set the height
      ~the the full layout height, but the table will only use the space it needs
      portal[baFocus].width = width - 10
      portal[baFocus].left = portal[baAttrib].left
      portal[baFocus].top = portal[baAttrib].bottom + 15
      portal[baFocus].height = height - portal[baFocus].top

      ~figure out the total height we need for the tab
      height = maximum(portal[baDiscip].bottom, portal[baFocus].bottom)
	
    else
	  portal[baFocus].visible = 0
	  portal[baFocus].height = 0	
	  
      portal[InfoTitle].top = 0
      portal[InfoTitle].width = width
      portal[InfoTitle].left = 0
      ~portal[InfoTitle].height = height
	  
	  template[shShipInfo].top = portal[InfoTitle].bottom + 10
	  template[shShipInfo].left = 0
	  template[shShipInfo].height = 170
	  
	  ~size and position the attributes table in the top left; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baAttrib].top = template[shShipInfo].bottom + 5
	  portal[baAttrib].width = width / 2 - 5
      portal[baAttrib].left = 0
      portal[baAttrib].height = height

      ~size and position the skills table in the top right; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baDiscip].top = portal[baAttrib].top
      portal[baDiscip].width = portal[baAttrib].width
      portal[baDiscip].left = width - portal[baDiscip].width
      portal[baDiscip].height = height - portal[baDiscip].top
	  
	  endif
      ]]></position>

    </layout>


  <!-- basics panel
        This is the "Basics" panel shown within Hero Lab.

        The "order" attribute dictates the sequence in which the various tabs will
        be displayed. To keep everything well organized, We break the tabs up into
        four logical groupings: (1) traits and creation details, (2) equipment,
        (3) details, and (4) in-play support. Each of these groupings will have a
        three-digit value that starts with the grouping number. Since the Basics
        panel should appear first within the traits group, it has an order of "110".

        As we assign order values, We'll leave gaps in the sequence (e.g. 110, 120,
        etc.). This will allow us to easily change our minds and slip a new panel
        inbetween two existing ones as the data files evolve, without having to go
        through and re-number everything.

        We setup a suitable margin around the edges of the panel. This ensures that
        there is a little bit of spacing from the edges and eliminates the need for
        our positioning scripts to make the appropriate adjustments.

        Like with layouts, panels have a "position" script to setup the dimensions
        of child elements and orchestrate the rendering of their contents. In many
        cases, as with this panel, the default handling of panels will ensure that
        the layouts are properly rendered.

        The panel is assigned a "live" tagexpr so that its visibility can be
        controlled for different types of characters. While not really useful in the
        sample data files, this approach can be quite useful when the data files
        expand to govern creation of widely varying characters, such as vampires vs.
        ghosts vs. mortals in the World of Darkness game system.
  -->
  <panel
    id="basics"
    name="Basics"
    marginhorz="5"
    marginvert="5"
    order="10">
    <live>!HideTab.basics</live>
    <layoutref layout="basics"/>
    <position><![CDATA[
      ~get the height used by the layout and use it, as that means we scroll
      ~if necessary
      perform layout[basics].render
      height = layout[basics].height
      ]]></position>
    </panel>


  </document>
